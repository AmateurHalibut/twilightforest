# Gradle
# Build your Java project and run tests with Gradle using a Gradle wrapper script.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/java

pool:
  vmImage: 'Ubuntu-latest'

variables:
  revision: $[counter('release-number', 0)]

steps:
- powershell: |
    (Get-Content ./gradle.properties).Split([Environment]::NewLine) | % {
        $kvp = $_.Split('=')
        if ($kvp.Count -gt 1) {
            $key = $kvp[0] -replace "\.", "_";
            $value = $kvp[1];
            Write-Host "##vso[task.setvariable variable=javaprops_$key]$value"
        }
    }
  displayName: Create Azure DevOps variables from gradle properties file

- task: Gradle@2
  displayName: Create Release Build
  inputs:
    workingDirectory: ''
    options: '-PCIRevision=$(javaprops_mod_version).$(revision) -PCIType=RELEASE'
    gradleWrapperFile: 'gradlew'
    gradleOptions: '-Xmx3072m'
    javaHomeOption: 'JDKVersion'
    jdkVersionOption: '1.8'
    jdkArchitectureOption: 'x64'
    publishJUnitResults: false
    testResultsFiles: '**/TEST-*.xml'
    tasks: 'build'

- task: CopyFiles@2
  displayName: Copy Release build to artifact staging
  inputs:
    sourceFolder: './build/libs/'
    contents: 'twilightforest-*-universal.jar'
    targetFolder: $(build.artifactStagingDirectory)
  condition: and(succeeded(), eq(variables['CreateArtifacts'], 'True'))

- task: PublishBuildArtifacts@1
  displayName: 'Publish Build Artifacts to Azure DevOps'
  condition: and(succeeded(), eq(variables['CreateArtifacts'], 'True'))
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'Release'
    publishLocation: 'Container'

- task: ado-discord-webhook@1
  displayName: Announce Build to discord
  inputs:
    channelId: '$(DiscordChannelID)'
    webhookKey: '$(DiscordChannelSecret)'
    messageType: 'embeds'
    embeds: |
      [{
          "title": "Build Succeeded",
          "description": "**Results:**\n$(System.TeamFoundationServerUri)Twilight%20Forest/_build/results?buildId=$(Build.BuildId)&view=results\n**Commit:**\n$(Build.Repository.Uri)/commit/$(Build.SourceVersion)\n**Author:**\n$(Build.SourceVersionAuthor)\n\n**Direct Download:**\n$(System.TeamFoundationServerUri)$(System.TeamProjectId)/_apis/build/builds/$(Build.BuildId)/artifacts?artifactName=drop&api-version=5.1&%24format=zip",
          "color": "65280"
      }]
  condition: and(succeeded(), eq(variables['CreateArtifacts'], 'True'))

- task: ado-discord-webhook@1
  displayName: Announce Failed Build to discord
  inputs:
    channelId: '$(DiscordChannelID)'
    webhookKey: '$(DiscordChannelSecret)'
    messageType: 'embeds'
    embeds: |
      [{
          "title": "Build Failed",
          "description": "**Results:**\n$(System.TeamFoundationServerUri)Twilight%20Forest/_build/results?buildId=$(Build.BuildId)&view=results\n**Commit:**\n$(Build.Repository.Uri)/commit/$(Build.SourceVersion)\n**Author:**\n$(Build.SourceVersionAuthor)",
          "color": "16711680"
      }]
  condition: and(failed(), eq(variables['CreateArtifacts'], 'True'))

- powershell: |
    (gci env:*).GetEnumerator() | Sort-Object Name | ForEach-Object {
      $nameAsCapitalSnakeCase = $_.Name
      Write-Output "$nameAsCapitalSnakeCase = $($_.Value)"
    }
  displayName: Dump Variables
  condition: eq(variables['system.debug'], 'true')
