# Gradle
# Build your Java project and run tests with Gradle using a Gradle wrapper script.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/java

pool:
  vmImage: 'Ubuntu-latest'

variables:
  revision: $[counter('release-number', 0)]
  artifactName: 'Release'
  GRADLE_USER_HOME: $(Pipeline.Workspace)/.gradle

steps:
- task: Cache@2
  inputs:
    key: 'build.gradle | gradle.properties | "$(Agent.OS)"'
    restoreKeys: gradle
    path: $(GRADLE_USER_HOME)
  displayName: Gradle build cache

- powershell: |
    (Get-Content ./gradle.properties).Split([Environment]::NewLine) | % {
        $kvp = $_.Split('=')
        if ($kvp.Count -gt 1) {
            $key = $kvp[0] -replace "\.", "_";
            $value = $kvp[1];
            Write-Host "##vso[task.setvariable variable=javaprops_$key]$value"
        }
    }
  displayName: Create Azure DevOps variables from gradle properties file

- task: Gradle@2
  displayName: Create Release Build
  inputs:
    workingDirectory: ''
    options: '--build-cache -PCIRevision=$(javaprops_mod_version).$(revision) -PCIType=RELEASE'
    gradleWrapperFile: 'gradlew'
    gradleOptions: '-Xmx3072m'
    javaHomeOption: 'JDKVersion'
    jdkVersionOption: '1.8'
    jdkArchitectureOption: 'x64'
    publishJUnitResults: false
    testResultsFiles: '**/TEST-*.xml'
    tasks: 'build'

- script: |
    # stop the Gradle daemon to ensure no files are left open (impacting the save cache operation later)
    ./gradlew --stop
  displayName: Kill Daemon

- task: CopyFiles@2
  displayName: Copy Release build to artifact staging
  inputs:
    sourceFolder: './build/libs/'
    contents: 'twilightforest-*-universal.jar'
    targetFolder: $(build.artifactStagingDirectory)
  condition: and(succeeded(), eq(variables['CreateArtifacts'], 'True'))

- task: PublishBuildArtifacts@1
  displayName: 'Publish Build Artifacts to Azure DevOps'
  condition: and(succeeded(), eq(variables['CreateArtifacts'], 'True'))
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: '$(artifactName)'
    publishLocation: 'Container'

- powershell: |
    $response = Invoke-RestMethod -Uri "$($env:SYSTEM_TEAMFOUNDATIONCOLLECTIONURI)$env:SYSTEM_TEAMPROJECTID/_apis/build/builds/$($env:BUILD_BUILDID)/artifacts?artifactName=Release&api-version=4.1"
    $response
    $Container = $response.resource.data.TrimStart("#/")
    $Container
    $downloadUrl = "$($env:SYSTEM_TEAMFOUNDATIONCOLLECTIONURI)_apis/resources/Containers/$($Container)?itemPath=$($Env:ARTIFACTNAME)%2Ftwilightforest-$($env:JAVAPROPS_MINECRAFT_VERSION)-$($env:JAVAPROPS_MOD_VERSION).$($env:REVISION)-universal.jar"
    $downloadUrl
    $jobResult = (Get-Culture).TextInfo.ToTitleCase(${env:agent.jobstatus})
    Write-Host "DiscordJarDownloadUrl=$downloadUrl"
    Write-Host "##vso[task.setvariable variable=DiscordJarDownloadUrl]$downloadUrl"
    Write-Host "DiscordJobResult=$jobResult"
    Write-Host "##vso[task.setvariable variable=DiscordJobResult]$jobResult"
    $Colour = 65280
    if ($jobResult -ne "Succeeded") {
      $Colour = 16711680
    }
    Write-Host "DiscordMessageColour=$Colour"
    Write-Host "##vso[task.setvariable variable=DiscordMessageColour]$Colour"

    $json = [Ordered]@{
        title= "Build $jobResult"
        url="$($Env:System_TeamFoundationServerUri)Twilight%20Forest/_build/results?buildId=$($Env:Build_BuildId)&view=results"
        color: $Colour
        fields=(
            [Ordered]@{
                name="Author"
                value="$($Env:Build_SourceVersionAuthor)"
            },
            [Ordered]@{
                name="Commit"
                value="$($Env:Build_Repository_Uri)/commit/$($env:Build_SourceVersion)"
            },
            [Ordered]@{
                name="Direct Download"
                value="$($Env:SourceVersionAuthor)"
            }
        )
    }
    $json | ConvertTo-Json -Compress

- task: ado-discord-webhook@1
  displayName: Announce Build to discord
  inputs:
    channelId: '$(DiscordChannelID)'
    webhookKey: '$(DiscordChannelSecret)'
    messageType: 'embeds'
    embeds: |
      [{
          "title": "Build Succeeded",
          "description": "**Results:**\n$(System.TeamFoundationServerUri)Twilight%20Forest/_build/results?buildId=$(Build.BuildId)&view=results\n**Commit:**\n$(Build.Repository.Uri)/commit/$(Build.SourceVersion)\n**Author:**\n$(Build.SourceVersionAuthor)\n\n**Direct Download:**\n$(DiscordJarDownloadUrl)",
          "color": "65280"
      }]
  condition: and(succeeded(), eq(variables['CreateArtifacts'], 'True'))

- task: ado-discord-webhook@1
  displayName: Announce Failed Build to discord
  inputs:
    channelId: '$(DiscordChannelID)'
    webhookKey: '$(DiscordChannelSecret)'
    messageType: 'embeds'
    embeds: |
      [{
          "title": "Build Failed",
          "description": "**Results:**\n$(System.TeamFoundationServerUri)Twilight%20Forest/_build/results?buildId=$(Build.BuildId)&view=results\n**Commit:**\n$(Build.Repository.Uri)/commit/$(Build.SourceVersion)\n**Author:**\n$(Build.SourceVersionAuthor)",
          "color": "16711680"
      }]
  condition: and(failed(), eq(variables['CreateArtifacts'], 'True'))

- powershell: |
    (gci env:*).GetEnumerator() | Sort-Object Name | ForEach-Object {
      $nameAsCapitalSnakeCase = $_.Name
      Write-Output "$nameAsCapitalSnakeCase = $($_.Value)"
    }
  displayName: Dump Variables
  #condition: eq(variables['system.debug'], 'true')
